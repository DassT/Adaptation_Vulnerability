import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm
from scipy.stats import norm
import py4etrics as py4
from py4etrics.tobit import Tobit
import wooldridge

def tobit_predict(x, model):
    coefs = model.params
    sigma = np.exp(coefs[-1])
    coefs = coefs[:-1]
    x = sm.add_constant(x, prepend=True, has_constant='add')
    prediction = []
    for i in range(x.shape[0]):
        prediction.append(norm.cdf(np.dot(x.iloc[i,:].values,coefs)/sigma) * np.dot(x.iloc[i,:].values,coefs) + sigma * norm.pdf(np.dot(x.iloc[i,:].values,coefs)/sigma))
    return prediction

#marginal effect computation

def PEA(x,model):
    coefs = model.params
    x = sm.add_constant(x)
    x = x.mean()
    sigma = np.exp(coefs[-1])
    coefs = coefs[:-1]
    factor = norm.cdf((np.dot(x.values, coefs))/sigma)
    return factor

def APE(x,model):
    coefs = model.params
    sigma = np.exp(coefs[-1])
    coefs = coefs[:-1]
    x = sm.add_constant(x)

    sum = 0
    for i in range(x.shape[0]):
        sum += norm.cdf(np.dot(x.iloc[i,:].values, coefs)/sigma)
    return sum/x.shape[0]